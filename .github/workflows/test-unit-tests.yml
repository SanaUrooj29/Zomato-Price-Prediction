name: Test Branch - Unit Tests

on:
  push:
    branches: [ test ]
  pull_request:
    branches: [ test ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create dummy dataset if missing
      run: |
        if [ ! -f "zomato_df.csv" ]; then
          echo "Creating dummy dataset for testing..."
          python -c "
import pandas as pd
import numpy as np

# Create dummy dataset with same structure as original
np.random.seed(42)
n_samples = 1000

data = {
    'online_order': np.random.randint(0, 2, n_samples),
    'book_table': np.random.randint(0, 2, n_samples),
    'rate': np.random.uniform(2.0, 5.0, n_samples),
    'votes': np.random.randint(10, 1000, n_samples),
    'location': np.random.randint(1, 100, n_samples),
    'rest_type': np.random.randint(1, 100, n_samples),
    'cuisines': np.random.randint(1, 200, n_samples),
    'cost': np.random.randint(100, 2000, n_samples),
    'menu_item': np.random.randint(1, 100, n_samples)
}

df = pd.DataFrame(data)
df.to_csv('zomato_df.csv', index=False)
print('Dummy dataset created successfully')
"
        fi
    
    - name: Generate model.pkl for testing
      run: |
        echo "ðŸ¤– Generating model.pkl for testing..."
        # Check if dataset exists, if not create a dummy model for testing
        if [ -f "zomato_df.csv" ]; then
          echo "Dataset found, generating real model..."
          python model.py
        else
          echo "Dataset not found, creating dummy model for testing..."
          python -c "
import pickle
import numpy as np
from sklearn.ensemble import ExtraTreesRegressor
from sklearn.datasets import make_regression

# Create dummy data for testing
X, y = make_regression(n_samples=100, n_features=8, noise=0.1, random_state=42)
# Ensure y is in range [0, 5] like restaurant ratings
y = (y - y.min()) / (y.max() - y.min()) * 5

# Train a simple model
model = ExtraTreesRegressor(n_estimators=10, random_state=42)
model.fit(X, y)

# Save the model
with open('model.pkl', 'wb') as f:
    pickle.dump(model, f)
print('Dummy model created successfully')
"
        fi
    
    - name: Run unit tests
      run: |
        echo "ðŸ§ª Running unit tests..."
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        echo "Files in tests directory:"
        ls -la tests/ || echo "tests directory not found"
        pytest tests/ -v --cov=. --cov-report=html --cov-report=term-missing --tb=short
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
    
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: 'Unit Tests'
        path: 'test-results.xml'
        reporter: 'java-junit'